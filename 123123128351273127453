local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserId = LocalPlayer.UserId
local BannedPlayers = {} -- Stores banned player UserIds
local AdminUserIds = {1137073737, 8274291975} -- List of admin user IDs
local correctKey = "FruitBattlegrounds2025" -- Required key
local keyEntered = false

-- Function to check if a player is an admin
local function isAdmin(userId)
    for _, adminId in ipairs(AdminUserIds) do
        if userId == adminId then
            return true
        end
    end
    return false
end

-- If player is banned, kick them immediately
if BannedPlayers[UserId] then
    LocalPlayer:Kick("You have been banned from using the script.")
end

-- Check if the player is an admin
if isAdmin(UserId) then
    print("Welcome Krak!")
    keyEntered = true
else
    -- Create key entry system for non-admin players
    local keyGui = Instance.new("ScreenGui", LocalPlayer.PlayerGui)
    local frame = Instance.new("Frame", keyGui)
    frame.Size = UDim2.new(1, 0, 1.1, 0)
    frame.Position = UDim2.new(0, 0, -0.05, 0)
    frame.BackgroundColor3 = Color3.new(0, 0, 0)

    local title = Instance.new("TextLabel", frame)
    title.Size = UDim2.new(1, 0, 0.2, 0)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.Text = "Welcome! Enter the Key to Continue"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.SourceSansBold
    title.TextSize = 40

    local keyBox = Instance.new("TextBox", frame)
    keyBox.Size = UDim2.new(0.5, 0, 0.1, 0)
    keyBox.Position = UDim2.new(0.25, 0, 0.5, 0)
    keyBox.PlaceholderText = "Enter Key Here"
    keyBox.TextColor3 = Color3.new(1, 1, 1)
    keyBox.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
    keyBox.Font = Enum.Font.SourceSansBold
    keyBox.TextSize = 24
    keyBox.ClearTextOnFocus = false

    local submitButton = Instance.new("TextButton", frame)
    submitButton.Size = UDim2.new(0.3, 0, 0.1, 0)
    submitButton.Position = UDim2.new(0.35, 0, 0.65, 0)
    submitButton.Text = "Submit Key"
    submitButton.TextColor3 = Color3.new(1, 1, 1)
    submitButton.BackgroundColor3 = Color3.new(0, 0.8, 0)
    submitButton.Font = Enum.Font.SourceSansBold
    submitButton.TextSize = 24

    submitButton.MouseButton1Click:Connect(function()
        if keyBox.Text == correctKey then
            keyEntered = true
            keyGui:Destroy() -- Close UI upon correct key entry
        else
            keyBox.Text = ""
            keyBox.PlaceholderText = "Incorrect! Try Again"
            keyBox.TextColor3 = Color3.new(1, 0, 0) -- Red text for error indication
            wait(1)
            keyBox.TextColor3 = Color3.new(1, 1, 1) -- Reset color
            keyBox.PlaceholderText = "Enter Key Here"
        end
    end)

    -- Wait until the correct key is entered before proceeding
    repeat wait() until keyEntered
end

print("Key verified! Proceeding with the script...")

local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

local Window = Luna:CreateWindow({
	Name = "Lunar fbtg", -- This Is Title Of Your Window
	Subtitle = nil, -- A Gray Subtitle next To the main title.
	LogoID = "82795327169782", -- The Asset ID of your logo. Set to nil if you do not have a logo for Luna to use.
	LoadingEnabled = true, -- Whether to enable the loading animation. Set to false if you do not want the loading screen or have your own custom one.
	LoadingTitle = "by exploitsgg", -- Header for loading screen
	LoadingSubtitle = "made by !mama", -- Subtitle for loading screen

	ConfigSettings = {
		RootFolder = nil, -- The Root Folder Is Only If You Have A Hub With Multiple Game Scripts and u may remove it. DO NOT ADD A SLASH
		ConfigFolder = "Lunar Fruit battlegrounds" -- The Name Of The Folder Where Luna Will Store Configs For This Script. DO NOT ADD A SLASH
	},

	KeySystem = false, -- As Of Beta 6, Luna Has officially Implemented A Key System!
	KeySettings = {
		Title = "Lunar Key system",
		Subtitle = "Get key in discord!",
		Note = "You get the key in a click of a button!",
		SaveInRoot = false, -- Enabling will save the key in your RootFolder (YOU MUST HAVE ONE BEFORE ENABLING THIS OPTION)
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		Key = {"earlyaccess2025"}, -- List of keys that will be accepted by the system, please use a system like Pelican or Luarmor that provide key strings based on your HWID since putting a simple string is very easy to bypass
		SecondAction = {
			Enabled = false, -- Set to false if you do not want a second action,
			Type = "Link", -- Link / Discord.
			Parameter = "" -- If Type is Discord, then put your invite link (DO NOT PUT DISCORD.GG/). Else, put the full link of your key system here.
		}
	}
})


local Tab = Window:CreateTab({
	Name = "Auto Farm",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Paragraph = Tab:CreateParagraph({
	Title = "Tutorial",
	Text = "First You need an auto clicker (any kind) make the Click Interval 1 second then press the toggle and turn on your auto clicker at the same time and afk 💝🙏 (REQUIRES GOOD INTERNET!)"
})

local VirtualInputManager = game:GetService("VirtualInputManager")
local autoActivateMoves = false
local running = false  -- flag to indicate if the loop is already running

-- Define the keys corresponding to your inventory moves.
local inventoryKeys = {
    Enum.KeyCode.One,
    Enum.KeyCode.Two,
    Enum.KeyCode.Three,
    Enum.KeyCode.Four,
    Enum.KeyCode.Five,
    Enum.KeyCode.Six,
}

-- Helper function to simulate a key press.
local function simulateKeyPress(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    wait(0.1)  -- A brief press duration; adjust if needed
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

-- Function that cycles through all inventory moves one by one.
local function activateMoves()
    running = true
    while autoActivateMoves do
        for i, key in ipairs(inventoryKeys) do
            if not autoActivateMoves then break end
            simulateKeyPress(key)
            wait(1.7)  -- Delay between each move activation, adjust as needed
        end
    end
    running = false
end

-- Create a toggle to control auto-activation using your UI system.
local Toggle = Tab:CreateToggle({
    Name = "Auto Use Moves with Keys",
    Description = "Cycles through all of your inventory moves (keys 1-9) one by one.",
    CurrentValue = false,
    Callback = function(Value)
        autoActivateMoves = Value
        if autoActivateMoves and not running then
            spawn(activateMoves)
        end
    end
}, "ToggleAutoMoves")

local Button = Tab:CreateButton({
	Name = "Server Hop",
	Description = "Server Hops", -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            Time = 1 -- seconds
            repeat wait() until game:IsLoaded()
            wait(Time)
            local PlaceID = game.PlaceId
            local AllIDs = {}
            local foundAnything = ""
            local actualHour = os.date("!*t").hour
            local Deleted = false
            function TPReturner()
               local Site;
               if foundAnything == "" then
                   Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
               else
                   Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
               end
               local ID = ""
               if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                   foundAnything = Site.nextPageCursor
               end
               local num = 0;
               for i,v in pairs(Site.data) do
                   local Possible = true
                   ID = tostring(v.id)
                   if tonumber(v.maxPlayers) > tonumber(v.playing) then
                       for _,Existing in pairs(AllIDs) do
                           if num ~= 0 then
                               if ID == tostring(Existing) then
                                   Possible = false
                               end
                           else
                               if tonumber(actualHour) ~= tonumber(Existing) then
                                   local delFile = pcall(function()
                                       delfile("NotSameServers.json")
                                       AllIDs = {}
                                       table.insert(AllIDs, actualHour)
                                   end)
                               end
                           end
                           num = num + 1
                       end
                       if Possible == true then
                           table.insert(AllIDs, ID)
                           wait()
                           pcall(function()
                               writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                               wait()
                               game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                           end)
                           wait(4)
                       end
                   end
               end
            end
             
            function Teleport()
               while wait() do
                   pcall(function()
                       TPReturner()
                       if foundAnything ~= "" then
                           TPReturner()
                       end
                   end)
               end
            end
             
            -- If you'd like to use a script before server hopping (Like a Automatic Chest collector you can put the Teleport() after it collected everything.
            Teleport()
    	end
})



local Tab = Window:CreateTab({
	Name = "Teleport",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Button = Tab:CreateButton({
	Name = "Teleport to Colloseum",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Colloseum")

			local player = game.Players.LocalPlayer
			local colosseumBlock = game.Workspace.Areas:FindFirstChild("Colloseum")
			
			if colosseumBlock and player.Character and player.Character.PrimaryPart then
				player.Character:SetPrimaryPartCFrame(colosseumBlock.CFrame)
			else
				warn("Colloseum not found")
			end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to Dressrosa",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Dessrosa")

			local player = game.Players.LocalPlayer
			local DressrosaBlock = game.Workspace.Areas:FindFirstChild("Dressrosa")
			
			if DressrosaBlock and player.Character and player.Character.PrimaryPart then
				player.Character:SetPrimaryPartCFrame(DressrosaBlock.CFrame)
			else
				warn("Dressrosa not found")
			end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to Forest",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Forest")

			local player = game.Players.LocalPlayer
			local ForestBlock = game.Workspace.Areas:FindFirstChild("Forest")
			
			if ForestBlock and player.Character and player.Character.PrimaryPart then
				player.Character:SetPrimaryPartCFrame(ForestBlock.CFrame)
			else
				warn("Forest not found")
			end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to Safe zone",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Safe zone")

			local player = game.Players.LocalPlayer
			local spawnLocation = game.Workspace.SafeZones.MainSpawn:FindFirstChild("SpawnLocation")
			
			if spawnLocation and player.Character and player.Character.PrimaryPart then
				local newPosition = spawnLocation.CFrame + Vector3.new(0, 8, 0) -- Adjust height (5 studs above)
				player.Character:SetPrimaryPartCFrame(newPosition)
			else
				warn("Spawn Location not found")
			end
    	end
})

Tab:CreateDivider()

local Label = Tab:CreateLabel({
	Text = "Teleport NPC's",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = Tab:CreateButton({
	Name = "Teleport to Kuma",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Kuma")

            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            
            local destination = workspace.NPCs:FindFirstChild("Kuma")
            
            if destination then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
            else
                warn("wtf")
            end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to Mystery Guy",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Mystery Guy")

            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            
            local destination = workspace.NPCs:FindFirstChild("Mystery Guy")
            
            if destination then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
            else
                warn("Mystery Guy not found in workspace.NPCs!")
            end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to Scientist",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Scientist")
            
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            
            local destination = workspace.NPCs:FindFirstChild("Scientist")
            
            if destination then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
            else
                warn("Scientist not found in workspace.NPCs!")
            end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to suro book",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Warning";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Dosent teleport if u havent accepted the quest!")

            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            
            local destination = workspace.NPCs:FindFirstChild("Soru Book")
            
            if destination then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
            else
                warn("Soru Book not found in workspace.NPCs!")
            end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to Titles NPC",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Titles NPC")
           
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            
            local destination = workspace.NPCs:FindFirstChild("Titles NPC")
            
            if destination then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
            else
                warn("Titles NPC not found in workspace.NPCs!")
            end
    	end
})

local Button = Tab:CreateButton({
	Name = "Teleport to Tournament Register",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Tournament Register")

            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            
            local destination = workspace.NPCs:FindFirstChild("Tournament Register")
            
            if destination then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
            else
                warn("Tournament Register not found in workspace.NPCs!")
            end
    	end
})

Tab:CreateDivider()

local Label = Tab:CreateLabel({
	Text = "Teleport (Cake island)",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = Tab:CreateButton({
	Name = "Teleport to Kuma",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local function showNotification(message)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Success";
                    Text = message;
                    Duration = 5; -- Time in seconds the notification stays visible
                })
            end
            
            -- Example usage:
            showNotification("Successfully teleported to Kuma!")
            
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            
            local destination = workspace.NPCs:FindFirstChild("Kuma")
            
            if destination then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
            else
                warn("Kuma not found in workspace.NPCs!")
            end
    	end
})

local Button = Tab:CreateButton({
    Name = "Teleport to SafeZone",
    Description = nil,
    Callback = function()
        local function showNotification(message)
            game.StarterGui:SetCore("SendNotification", {
                Title = "Warning";
                Text = message;
                Duration = 5; -- Time in seconds the notification stays visible
            })
        end

    
        
        -- Example usage:
        showNotification("Dosent work cuz im still working on it!")
        
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        local safeZones = workspace.SafeZones:GetChildren()
        local destination = safeZones[6] -- Gets the 6th child

        if destination and destination.PrimaryPart then
            character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
        else
            warn("SafeZone 6 not found or missing PrimaryPart!")
        end
    end
})

Tab:CreateDivider()

local Label = Tab:CreateLabel({
	Text = "Boss Spawn",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = Tab:CreateButton({
    Name = "Teleport to Marco",
    Description = "Teleports you to Marco",
    Callback = function()
        local player = game.Players.LocalPlayer
        local bigTree = workspace.Terrain:FindFirstChild("BigTree")  -- Look for BigTree under workspace.Terrain
        
        if bigTree then
            if player.Character and player.Character.PrimaryPart then
                -- Teleport the player's character to BigTree's position
                player.Character:SetPrimaryPartCFrame(bigTree.CFrame)
            end
        else
            -- Create a temporary GUI message informing that BigTree couldn't be found
            local screenGui = Instance.new("ScreenGui", player.PlayerGui)
            local textLabel = Instance.new("TextLabel", screenGui)
            
            textLabel.Size = UDim2.new(0.5, 0, 0.1, 0)
            textLabel.Position = UDim2.new(0.25, 0, 0.1, 0)
            textLabel.BackgroundColor3 = Color3.new(0, 0, 0)
            textLabel.TextColor3 = Color3.new(1, 1, 1)
            textLabel.Font = Enum.Font.SourceSansBold
            textLabel.TextSize = 30
            textLabel.Text = "idk"
            
            -- Remove the message after 5 seconds
            wait(5)
            screenGui:Destroy()
        end
    end
}, "TeleportBigTree")

Tab:CreateDivider()

local Label = Tab:CreateLabel({
	Text = "Player Teleport",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

-- Get the Players service and the local player
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- Build an array of player names (excluding the local player) for the dropdown options
local playersList = {}
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        table.insert(playersList, player.Name)
    end
end

-- Fallback in case there are no other players
if #playersList == 0 then
    playersList = {"No players available"}
end

-- Create the dropdown with the list of player names
local Dropdown = Tab:CreateDropdown({
    Name = "Teleport to Player",
    Description = "Select a player to teleport to their character.",
    Options = playersList,                   -- List of player names
    CurrentOption = playersList[1],          -- Default option (first name in the list)
    MultipleOptions = false,                 
    SpecialType = nil,
    Callback = function(selectedPlayerName)
        -- Find the target player based on the selected name
        local targetPlayer = Players:FindFirstChild(selectedPlayerName)
        if targetPlayer then
            -- Ensure the target player's character is loaded
            local character = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
            local targetHRP = character:FindFirstChild("HumanoidRootPart")
            if targetHRP then
                -- Ensure the local player's character is ready and has a HumanoidRootPart
                local localCharacter = localPlayer.Character or localPlayer.CharacterAdded:Wait()
                local localHRP = localCharacter:FindFirstChild("HumanoidRootPart")
                
                if localHRP then
                    -- Teleport the local player's character to the target's position
                    localHRP.CFrame = targetHRP.CFrame
                    print("Teleported to "..selectedPlayerName)
                else
                    warn("Your character is missing a HumanoidRootPart!")
                end
            else
                warn("The player " .. selectedPlayerName .. " doesn't have a HumanoidRootPart!")
            end
        else
            warn("Player " .. selectedPlayerName .. " not found!")
        end
    end
}, "Dropdown")

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- Build the list of players (excluding LocalPlayer)
local playersList = {}
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        table.insert(playersList, player.Name)
    end
end

-- Create the dropdown with the list of players
local Dropdown = Tab:CreateDropdown({
    Name = "Bring Player to Me",
    Description = "Select a player to teleport them to your location.",
    Options = playersList,
    CurrentOption = playersList[1],
    MultipleOptions = false,
    SpecialType = nil,
    Callback = function(selectedPlayerName)
        local targetPlayer = Players:FindFirstChild(selectedPlayerName)
        if targetPlayer then
            local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
            local localCharacter = localPlayer.Character or localPlayer.CharacterAdded:Wait()
            
            if targetCharacter and localCharacter then
                local targetHRP = targetCharacter:FindFirstChild("HumanoidRootPart")
                local localHRP = localCharacter:FindFirstChild("HumanoidRootPart")
                if targetHRP and localHRP then
                    -- Teleport the target player's character near your location
                    targetHRP.CFrame = localHRP.CFrame * CFrame.new(3, 0, 3)
                    
                    -- Anchor the target's HRP briefly to help keep them in place.
                    targetHRP.Anchored = true
                    delay(1, function()  -- unanchor after 1 second
                        if targetHRP then
                            targetHRP.Anchored = false
                        end
                    end)
                    print("Teleported " .. selectedPlayerName .. " to your location!")
                else
                    warn("Either your character or ".. selectedPlayerName .. "'s character is missing a HumanoidRootPart!")
                end
            else
                warn("Either the target or your character is not loaded!")
            end
        else
            warn("Player '" .. tostring(selectedPlayerName) .. "' not found!")
        end
    end
}, "BringPlayerDropdown")

local Tab = Window:CreateTab({
	Name = "Misc",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local WalkSpeedSlider = Tab:CreateSlider({
    Name = "WalkSpeed Slider",
    Range = {0, 200}, -- Min and max walk speed values
    Increment = 5, -- Walk speed will change in steps of 5
    CurrentValue = 16, -- Default Roblox walk speed
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = Value
        end
    end
}, "WalkSpeed") -- Unique flag identifier

local JumpHeightSlider = Tab:CreateSlider({
    Name = "Jump Height Slider (Dosent work im fixing)",
    Range = {0, 150}, -- Min and max jump height values
    Increment = 5, -- Jump power will change in steps of 5
    CurrentValue = 50, -- Default Roblox jump power
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = Value
        end
    end
}, "JumpHeight") -- Unique flag identifier

local Label = Tab:CreateLabel({
	Text = "You cant undo this!",
	Style = 3 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = Tab:CreateButton({
	Name = "Ground Tool (FOR FRUITS THAT DONT HAVE KNOCKBACK)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local tool = Instance.new("Tool") -- Create the tool
            tool.Name = "Ground Spawner"
            
            local handle = Instance.new("Part") -- Create a handle for the tool
            handle.Size = Vector3.new(2, 2, 2) -- Small part to represent the tool
            handle.Name = "Handle"
            handle.Parent = tool
            
            tool.RequiresHandle = true
            tool.Parent = game.Players.LocalPlayer.Backpack -- Add tool to player's inventory
            
            tool.Activated:Connect(function()
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local baseplate = Instance.new("Part")
                    baseplate.Size = Vector3.new(50, 1, 50) -- Baseplate size
                    baseplate.Position = player.Character.HumanoidRootPart.Position - Vector3.new(0, 1, 0) -- Position under player
                    baseplate.Anchored = true
                    baseplate.Parent = game.Workspace
                end
            end)
    	end
})

local Button = Tab:CreateButton({
	Name = "Hollow Box Tool (FOR FRUITS THAT HAVE KNOCKBACK)",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            local tool = Instance.new("Tool")
            tool.Name = "Hollow Box Spawner"
            
            local handle = Instance.new("Part") -- Tool handle
            handle.Size = Vector3.new(2, 2, 2)
            handle.Name = "Handle"
            handle.Parent = tool
            
            tool.RequiresHandle = true
            tool.Parent = game.Players.LocalPlayer.Backpack -- Add to player's inventory
            
            tool.Activated:Connect(function()
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPos = player.Character.HumanoidRootPart.Position - Vector3.new(0, 3, 0) -- Position below player
                    local size = Vector3.new(10, 10, 10) -- Box dimensions
                    
                    -- Function to create a box wall
                    local function createWall(position, rotation)
                        local wall = Instance.new("Part")
                        wall.Size = Vector3.new(size.X, size.Y, 1) -- Thin wall
                        wall.Position = position
                        wall.Anchored = true
                        wall.Parent = game.Workspace
                        wall.Color = Color3.fromRGB(100, 100, 100) -- Gray color
                        wall.Material = Enum.Material.Metal
                        wall.Rotation = rotation
                    end
                    
                    -- Create walls around the hollow box
                    createWall(rootPos + Vector3.new(0, 0, size.Z/2), Vector3.new(0, 0, 0))  -- Front
                    createWall(rootPos + Vector3.new(0, 0, -size.Z/2), Vector3.new(0, 180, 0)) -- Back
                    createWall(rootPos + Vector3.new(size.X/2, 0, 0), Vector3.new(0, 90, 0)) -- Right
                    createWall(rootPos + Vector3.new(-size.X/2, 0, 0), Vector3.new(0, -90, 0)) -- Left
                    createWall(rootPos + Vector3.new(0, size.Y/2, 0), Vector3.new(90, 0, 0)) -- Top
                    createWall(rootPos + Vector3.new(0, -size.Y/2, 0), Vector3.new(-90, 0, 0)) -- Bottom
                end
            end)
    	end
})

local Label = Tab:CreateLabel({
	Text = "Btw the box spawns at the place your at!",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = Tab:CreateButton({
	Name = "Inf Yield",
	Description = nil, -- Creates A Description For Users to know what the button does (looks bad if you use it all the time),
    	Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    	end
})

local Tab = Window:CreateTab({
	Name = "Boss related",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Label = Tab:CreateLabel({
	Text = "Cake Queen",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = Tab:CreateButton({
    Name = "Teleport to Cake Queen",
    Description = "Teleports you to Cake Queen located in workspace.Characters.NPCs",
    Callback = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Locate the 'Cake Queen' NPC inside workspace.Characters.NPCs
        local npcFolder = workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild("NPCs")
        local destination = npcFolder and npcFolder:FindFirstChild("Cake Queen")
        
        if destination then
            -- Ensure the NPC has a PrimaryPart for teleportation
            if destination.PrimaryPart then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
                print("Teleported to Cake Queen!")
            else
                warn("Cake Queen does not have a PrimaryPart set!")
            end
        else
            warn("Cake Queen not found in workspace.Characters.NPCs!")
        end
    end
})

local Button = Tab:CreateButton({
    Name = "Kill cake queen",
    Description = "Instantly kills the Cake Queen NPC and credits the kill to you.",
    Callback = function()
        local cakeQueen = workspace.Characters.NPCs:FindFirstChild("Cake Queen")
        if cakeQueen then
            local humanoid = cakeQueen:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- Create a creator tag to credit the kill to the LocalPlayer
                local creatorTag = Instance.new("ObjectValue")
                creatorTag.Name = "creator"
                creatorTag.Value = game.Players.LocalPlayer
                creatorTag.Parent = humanoid

                -- Remove the creator tag after 2 seconds
                game:GetService("Debris"):AddItem(creatorTag, 2)

                humanoid.Health = 0
                print("Cake Queen has been 1shotted by " .. game.Players.LocalPlayer.Name .. "!")
            else
                warn("Cake Queen does not contain a Humanoid!")
            end
        else
            warn("Cake Queen was not found in workspace.Characters.NPCs!")
        end
    end
}, "CakeQueenButton")

Tab:CreateDivider()

local Label = Tab:CreateLabel({
	Text = "Marco",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = Tab:CreateButton({
    Name = "Teleport to Marco",
    Description = "Teleports you to Marco located in workspace.Characters.NPCs",
    Callback = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Locate the 'Cake Queen' NPC inside workspace.Characters.NPCs
        local npcFolder = workspace:FindFirstChild("Characters") and workspace.Characters:FindFirstChild("NPCs")
        local destination = npcFolder and npcFolder:FindFirstChild("Marco")
        
        if destination then
            -- Ensure the NPC has a PrimaryPart for teleportation
            if destination.PrimaryPart then
                character:SetPrimaryPartCFrame(destination.PrimaryPart.CFrame)
                print("Teleported to Marco!")
            else
                warn("Marco does not have a PrimaryPart set!")
            end
        else
            warn("Marco not found in workspace.Characters.NPCs!")
        end
    end
})

local Button = Tab:CreateButton({
    Name = "Kill Marco",
    Description = "Instantly kills the Marco NPC and credits the kill to you.",
    Callback = function()
        local Marco = workspace.Characters.NPCs:FindFirstChild("Marco")
        if Marco then
            local humanoid = Marco:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- Create a creator tag to credit the kill to the LocalPlayer
                local creatorTag = Instance.new("ObjectValue")
                creatorTag.Name = "creator"
                creatorTag.Value = game.Players.LocalPlayer
                creatorTag.Parent = humanoid
                
                -- Optionally, remove the creator tag after a short delay
                game:GetService("Debris"):AddItem(creatorTag, 2)
                
                humanoid.Health = 0
                print("Marco has been 1shotted by " .. game.Players.LocalPlayer.Name .. "!")
            else
                warn("Marco does not contain a Humanoid!")
            end
        else
            warn("Marco was not found in workspace.Characters.NPCs!")
        end
    end
}, "MarcoButton")
